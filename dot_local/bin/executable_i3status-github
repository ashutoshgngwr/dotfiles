#!/usr/bin/env python

"""
A script to print the status line for a custom block to show GitHub notification
count in i3status-rust.

It is an alternative to built-in 'github' block available with i3status-rust.
https://github.com/greshake/i3status-rust/blob/master/blocks.md#github

The only difference is that instead of using a Personal Access Token, this
script uses GitHub CLI 'gh' and only prints the total notification count.
"""

from argparse import ArgumentParser
from datetime import datetime
import json
import os
import subprocess
import tempfile


def get_github_notifications():
    """
    Returns the notification count of user's GitHub account by making an API
    call using the GitHub CLI tool.
    """

    p = subprocess.run(
        ["gh", "api", "/notifications"],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )

    if p.returncode != 0:
        return []  # mask errors by returning empty list for notifications.

    return json.loads(p.stdout)


def show_desktop_notifications(notifications):
    iso8601Fmt = "%Y-%m-%dT%H:%M:%SZ"
    last_updated_ts = datetime(1970, 1, 1)
    tdir = tempfile.gettempdir()
    last_updated_ts_path = os.path.join(tdir, "github_notifications_last_updated_ts")
    try:
        with open(last_updated_ts_path, "r") as file:
            last_updated_ts = datetime.strptime(file.read(), iso8601Fmt)
    except FileNotFoundError:
        pass

    new_last_updated_ts = last_updated_ts
    for n in notifications:
        updated_at = datetime.strptime(n["updated_at"], iso8601Fmt)
        if updated_at <= last_updated_ts:
            continue

        new_last_updated_ts = max(new_last_updated_ts, updated_at)
        subprocess.run(
            [
                "notify-send",
                "-u",
                "normal",
                "-a",
                "GitHub",
                "-i",
                "github",
                n["repository"]["full_name"],
                "{} ({})".format(n["subject"]["title"], n["subject"]["type"]),
            ],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )

    with open(last_updated_ts_path, "w") as file:
        file.write(new_last_updated_ts.strftime(iso8601Fmt))


def main():
    p = ArgumentParser()
    p.add_argument(
        "-n",
        "--desktop-notifications",
        help="Enable desktop notifications using notify-send",
        action="store_true",
    )

    args = p.parse_args()
    notifications = get_github_notifications()

    if args.desktop_notifications:
        show_desktop_notifications(notifications)

    ncount = len(notifications)
    state = "Idle"
    if ncount in range(1, 4):
        state = "Info"
    elif ncount in range(4, 7):
        state = "Good"
    elif ncount in range(7, 10):
        state = "Warning"
    elif ncount > 0:
        state = "Critical"

    print(
        json.dumps(
            {
                "icon": "github",
                "text": " " + str(ncount),
                "state": state,
            }
        )
    )


if __name__ == "__main__":
    main()
